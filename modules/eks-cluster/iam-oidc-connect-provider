data "tls_certificate" "demo" {
 url = aws_eks_cluster.eks-cluster.identity.0.oidc.0.issuer
}

data "aws_eks_cluster" "demo" {
 name = aws_eks_cluster.eks-cluster.name
}

resource "aws_iam_openid_connect_provider" "demo" {
 client_id_list = ["sts.amazonaws.com"]
 thumbprint_list = [data.tls_certificate.demo.certificates[0].sha1_fingerprint]
 url = aws_eks_cluster.eks-cluster.identity.0.oidc.0.issuer
 }



 data "aws_iam_policy_document" "example_assume_role_policy" {
 statement {
 actions = ["sts:AssumeRoleWithWebIdentity"]
 effect = "Allow"
condition {
 test = "StringEquals"
 variable = "${replace(aws_iam_openid_connect_provider.demo.url, "https://", "")}:sub"
 values = ["system:serviceaccount:kube-system:aws-node"]
 }
 principals {
 identifiers = [aws_iam_openid_connect_provider.demo.arn]
 type = "Federated"
 }
 }
}


resource "aws_iam_role" "aws-node" {
 assume_role_policy = data.aws_iam_policy_document.example_assume_role_policy.json
 name = "aws-node"
}

resource "aws_eks_identity_provider_config" "demo" {
 #cluster_name = var.cluster-name
 cluster_name = "eks-cluster"
 oidc {
 client_id = "${substr(aws_eks_cluster.eks-cluster.identity.0.oidc.0.issuer, -32, -1)}"
 identity_provider_config_name = "sdemonew"
 issuer_url = "https://${aws_iam_openid_connect_provider.demo.url}"
 
 }
}



#------------------------

data "http" "lbc_iam_policy" {
  url = "https://raw.githubusercontent.com/kubernetes-sigs/aws-load-balancer-controller/main/docs/install/iam_policy.json"

  # Optional request headers
  request_headers = {
    Accept = "application/json"
  }
}

output "lbc_iam_policy" {
  value = data.http.lbc_iam_policy.body
}





# Resource: Create AWS Load Balancer Controller IAM Policy 
resource "aws_iam_policy" "lbc_iam_policy" {
  name        = "addon-AWSLoadBalancerControllerIAMPolicy"
  path        = "/"
  description = "AWS Load Balancer Controller IAM Policy"
  policy      = data.http.lbc_iam_policy.body
}

output "lbc_iam_policy_arn" {
  value = aws_iam_policy.lbc_iam_policy.arn
}

# Resource: Create IAM Role 
resource "aws_iam_role" "lbc_iam_role" {
  name = "addon-lbc-iam-role"

  # Terraform's "jsonencode" function converts a Terraform expression result to valid JSON syntax.
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRoleWithWebIdentity"
        Effect = "Allow"
        Sid    = ""
        Principal = {
          Federated = "${data.terraform_remote_state.eks-cluster.outputs.aws_iam_openid_connect_provider_arn}"
        }
        Condition = {
          StringEquals = {
            "${data.terraform_remote_state.eks.outputs.aws_iam_openid_connect_provider_extract_from_arn}:aud" : "sts.amazonaws.com",
            "${data.terraform_remote_state.eks.outputs.aws_iam_openid_connect_provider_extract_from_arn}:sub" : "system:serviceaccount:kube-system:aws-load-balancer-controller"
          }
        }
      },
    ]
  })

  tags = {
    tag-key = "AWSLoadBalancerControllerIAMPolicy"
  }
}

# Associate Load Balanacer Controller IAM Policy to  IAM Role
resource "aws_iam_role_policy_attachment" "lbc_iam_role_policy_attach" {
  policy_arn = aws_iam_policy.lbc_iam_policy.arn
  role       = aws_iam_role.lbc_iam_role.name
}

output "lbc_iam_role_arn" {
  description = "AWS Load Balancer Controller IAM Role ARN"
  value       = aws_iam_role.lbc_iam_role.arn
}